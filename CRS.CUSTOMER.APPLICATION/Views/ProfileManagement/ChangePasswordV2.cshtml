@model CRS.CUSTOMER.APPLICATION.Models.ProfileManagement.ChangePasswordModel
@{
    ViewBag.Title = "Change Password V2";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .header {
        color: #18181B;
        margin-top: 12px;
        font-size: 16px;
        font-style: normal;
        font-weight: 700;
        line-height: 16px;
    }

    .inputWrapper {
        border: 1px solid #ECECEC;
        border-radius: 4px;
    }

        .inputWrapper > input {
            border: none;
            outline: none;
            background: none;
        }

    input::placeholder {
        color: var(--silver, #A6A6A6);
        font-size: 12px;
        font-style: normal;
        font-weight: 400;
        line-height: 18px;
    }

    .nextButton {
        background: #D75A8B;
        padding: 8px 12px;
        color: #fff;
        font-weight: 700;
        line-height: 24px;
        font-size: 14px;
    }

    input {
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 3px;
        width: 200px;
        /* Space for icon */
        background-repeat: no-repeat;
        background-position: 3px center;
    }

        input:focus {
            border: 1px solid #D75A8B !important;
            border-radius: 3px;
        }


    .message ul {
        list-style-type: none;
        padding-left: 10px;
    }

        .message ul li {
            margin-bottom: 5px;
            padding-left: 4px;
        }

            .message ul li::marker {
                color: green;
                margin-right: 1ch;
                content: '✓';
            }

            .message ul li.error::marker {
                color: red;
                margin-right: 1ch;
                content: 'X';
            }

    .labelInfo {
        color: #535353;
        font-size: 14px;
        font-weight: 700;
        line-height: 18px;
        text-transform: uppercase;
    }
</style>
<div>
    <!-- back button end -->
    <div class=" px-6">
        <!-- <div class="header">
        現在のパスワード
        </div> -->
        @using (Html.BeginForm("ChangePasswordV2", "ProfileManagement", FormMethod.Post, new { @class = "", @id = "Form" }))
        {
            @Html.AntiForgeryToken();
            <div class="flex flex-col gap-[24px] mt-6">
                <!-- for old password -->
                <div>
                    <label for="oldPassword" class="labelInfo">現在のパスワード</label>
                    <div class="relative inputWrapper mt-1 ">
                        @Html.TextBoxFor(model => model.OldPassword, new
                   {
                       @class = "w-full focus:outline-none ring-0 focus:ring-0 focus:ring-transparent",
                       @id = "oldPassword",
                       @placeholder = "パスワード",
                       @maxLength = "16",
                       type = "password"
                   })
                        @*<input type="password"
                            class="w-full   focus:outline-none ring-0 focus:ring-0 focus:ring-transparent" style=""
                            placeholder="パスワード" name="oldPassword" id="oldPassword" required>*@
                        <i class="las la-eye password-eye absolute top-3 right-2 " onclick="togglePassword()"
                           required></i>
                        <span class="validationMessage">
                            @Html.ValidationMessageFor(m => m.OldPassword)
                        </span>
                    </div>
                    <div class="flex justify-end items-start mt-1" onclick="logoutAndRedirect()"><span class="text-[#D17979] text-[11px] font-medium leading-[16px] text-right">パスワードをお忘れですか？</span></div>
                </div>
                <!-- for passowrd -->
                <div>
                    <label for="password" class="labelInfo">新しいパスワード</label>
                    <div class="relative inputWrapper mt-1">
                        @Html.TextBoxFor(model => model.NewPassword, new
                   {
                       @class = "w-full   focus:outline-none ring-0 focus:ring-0 focus:ring-transparent",
                       @id = "password",
                       @name = "password",
                       @placeholder = "パスワード",
                       @maxLength = "16",
                       type = "password"
                   })
                        @*<input type="password"
                            class="w-full   focus:outline-none ring-0 focus:ring-0 focus:ring-transparent" style=""
                            placeholder="パスワード" name="password" id="password" required>*@
                        <i class="las la-eye password-eye absolute top-3 right-2 " onclick="togglePassword()"
                           required></i>
                        <span class="validationMessage">
                            @Html.ValidationMessageFor(m => m.NewPassword)
                        </span>
                    </div>
                    <ul id="messages" class="message"></ul>
                </div>
                <!-- for confirm password -->
                <div>
                    <label for="confirmPassword" class="labelInfo">新しいパスワードを確認</label>
                    <div class="relative inputWrapper mt-1 ">
                        @Html.TextBoxFor(model => model.ConfirmPassword, new
                   {
                       @class = "w-full   focus:outline-none ring-0 focus:ring-0 focus:ring-transparent",
                       @id = "confirmPassword",
                       @name = "confirmPassword",
                       @placeholder = CRS.CUSTOMER.APPLICATION.Resources.Resource.ConfirmNewPassword,
                       @maxLength = "16",
                       type = "password"
                   })
                        @*<input type="password"
                            class="w-full   focus:outline-none ring-0 focus:ring-0 focus:ring-transparent" style=""
                            placeholder="パスワード" name="confirmPassword" id="confirmPassword" required>*@
                        <i class="las la-eye password-eye absolute top-3 right-2 " onclick="togglePassword()"
                           required></i>
                        <span class="validationMessage">
                            @Html.ValidationMessageFor(m => m.ConfirmPassword)
                        </span>
                    </div>
                    <ul id="messagesConfirm" class="message"></ul>
                </div>
            </div>
            <!-- for next button  -->
            <div class="mt-6">
                <button type="submit" class="nextButton border rounded-lg  w-full">次</button>
            </div>
        }
    </div>
</div>
<script>document.querySelectorAll('.password-eye').forEach(function (eyeIcon) {
        eyeIcon.addEventListener('click', function () {
            togglePassword(this);
        });
    });
    function togglePassword(eyeIcon) {
        const passwordInput = eyeIcon.previousElementSibling;

        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            eyeIcon.classList.remove('la-eye');
            eyeIcon.classList.add('la-eye-slash');
        } else {
            passwordInput.type = 'password';
            eyeIcon.classList.remove('la-eye-slash');
            eyeIcon.classList.add('la-eye');
        }
    }</script>

<script>const passwordInput = document.getElementById('password');
    const messagesElement = document.getElementById('messages');
    // validatePassword(); // Initial validation
    passwordInput.addEventListener('focus', function () {
        validatePassword();
    });
    passwordInput.addEventListener('input', function () {
        validatePassword();
    });
    passwordInput.addEventListener('focusout', function () {
        validatePassword(true);
    });
    function validatePassword(showMessage) {
        const password = passwordInput.value;
        const hasAlphanumeric = /^(?=.*[a-zA-Z])(?=.*[0-9])/.test(password);
        const hasUpperCaseAndLower = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/.test(password);
        const hasSpecialChar = /[!@@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]/.test(password);
        const hasMinLength = password.length >= 8;
        const hasLetterAndDigit = /^(?=.*[a-z])(?=.*[A-Z]).+$/.test(password);
        const isStrongPassword = hasUpperCaseAndLower && hasAlphanumeric && hasSpecialChar && hasMinLength;
        if (showMessage && isStrongPassword) {
            messagesElement.innerHTML = '<ul><li class="success text-[10px] font-normal leading-[13.62px]" >パスワードは強力です</li></ul>';
        } else {
            const messages = [
                { valid: hasMinLength, message: '最低8文字必要です' },
                { valid: hasAlphanumeric, message: '英数字の文字を含める必要があります' },
                { valid: hasUpperCaseAndLower, message: '大文字と小文字の両方を含める必要があります' },
                { valid: hasSpecialChar, message: '特殊文字を含める必要があります' },
            ];
            messagesElement.innerHTML = '<ul>' +
                messages.map(({ valid, message }) => `<li class="${valid ? 'success' : 'error'} text-[10px] text-[#666] font-normal leading-[13.62px]">${message}</li>`).join('') +
                '</ul>';
        }
    }</script>
<script>const passwordInput1 = document.getElementById('password');
    const confirm1 = document.getElementById('confirmPassword');
    const messagesElement1 = document.getElementById('messagesConfirm');
    confirm1.addEventListener("input", function () {
        const password = passwordInput1.value;
        const confirmPassword = confirm1.value;

        if (confirmPassword !== "" && password === confirmPassword) {
            messagesElement1.innerHTML = '<ul><li class="success text-[10px] text-[#666] font-normal leading-[13.62px]">パスワードが一致する</li></ul>';
        } else {
            messagesElement1.innerHTML = '<ul><li class="error text-[10px] text-[#666] font-normal leading-[13.62px]">パスワードが一致していません</li></ul>';
        }
    });</script>

<script>function logoutAndRedirect() {
        $.ajax({
            url: '/Home/LogOff',
            method: 'POST', 
            success: function () {
                window.location.href = '/Home/ForgotPassword'; 
            },
            error: function () {
                window.location.reload();
            }
        });
    }</script>
