@model CRS.CUSTOMER.APPLICATION.Models.ProfileManagement.ChangePasswordModel
@{
    ViewBag.Title = "パスワード変更‖ ホスログ《 ホストクラブ初回来店・ネット予約》";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var errormessage = @TempData["ChangePWErrorMessage"] as string; ;

}

<style>
    .header {
        color: #18181B;
        margin-top: 12px;
        font-size: 16px;
        font-style: normal;
        font-weight: 700;
        line-height: 16px;
    }

    .inputWrapper {
        border: 1px solid #ECECEC;
        border-radius: 4px;
    }

        .inputWrapper > input {
            border: none;
            outline: none;
            background: none;
        }

    input::placeholder {
        color: var(--silver, #A6A6A6);
        font-size: 12px;
        font-style: normal;
        font-weight: 400;
        line-height: 18px;
    }

    .nextButton {
        background: #D75A8B;
        width: 100%;
        padding: 8px 12px;
        color: #fff;
        font-weight: 700;
        line-height: 24px;
        font-size: 14px;
    }

    input {
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 3px;
        width: 200px;
        /* Space for icon */
        background-repeat: no-repeat;
        background-position: 3px center;
    }

        input:focus {
            border: 1px solid #D75A8B !important;
            border-radius: 3px;
        }

    /* Remove default list styles and add padding */
    .message ul {
        list-style-type: none;
        padding-left: 10px;
    }

        /* Style for list items */
        .message ul li {
            margin-bottom: 5px;
            padding-left: 4px;
            position: relative;
        }

            /* Custom marker for successful items */
            .message ul li.success::before {
                content: '✓'; /* Unicode character for checkmark */
                color: green;
                margin-right: 5px; /* Adjust as needed */
            }

            /* Custom marker for error items */
            .message ul li.error::before {
                content: 'X'; /* Unicode character for cross mark */
                color: red;
                margin-right: 5px; /* Adjust as needed */
            }


    .labelInfo {
        color: #535353;
        font-size: 14px;
        font-weight: 700;
        line-height: 18px;
        text-transform: uppercase;
    }

    .waitingMessageWrapper {
        border-radius: 4px;
        background: #FFEDED;
        margin-top: 16px;
        /*display: none;*/
    }

    .waitingMessage {
        color: #000;
        font-feature-settings: 'clig' off, 'liga' off;
        font-size: 10px;
        font-style: normal;
        font-weight: 500;
        line-height: normal;
    }


    .modal {
        /* position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        display: flex;
        justify-content: center;
        align-items: center;*/

        display: flex;
        width: 100%;
        padding: 32px 0px;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 300px;
        text-align: center;
        border-radius: 15px;
    }

    .cancelButton {
        width: 135px;
        color: #292F33;
        font-feature-settings: 'clig' off, 'liga' off;
        font-size: 14px;
        font-style: normal;
        font-weight: 500;
        line-height: 24px; /* 171.429% */
        text-decoration-line: underline;
    }

    .nextButton2 {
        width: 135px;
        padding: 14px 12px;
        justify-content: center;
        align-items: center;
        gap: 12px;
        flex: 1 0 0;
        color: #FFFFFF
    }

    .headerName {
        color: #D17979;
        text-align: center;
        font-size: 14px;
        font-style: normal;
        font-weight: 700;
        line-height: 100%;
    }
</style>
<div>
    <!-- back button end -->
    <div class=" px-6">
        <!-- <div class="header">
        現在のパスワード
        </div> -->

        <div id="waitingMessageWrapper" style="display:none">
            <div class="flex p-2 gap-2 items-center waitingMessageWrapper">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
                    <path d="M8 1.5C4.416 1.5 1.5 4.416 1.5 8C1.5 11.584 4.416 14.5 8 14.5C11.584 14.5 14.5 11.584 14.5 8C14.5 4.416 11.584 1.5 8 1.5ZM8 2.5C8.72252 2.49912 9.43811 2.64079 10.1058 2.91688C10.7735 3.19297 11.3801 3.59806 11.891 4.10896C12.4019 4.61985 12.807 5.22652 13.0831 5.8942C13.3592 6.56189 13.5009 7.27748 13.5 8C13.5009 8.72252 13.3592 9.43811 13.0831 10.1058C12.807 10.7735 12.4019 11.3801 11.891 11.891C11.3801 12.4019 10.7735 12.807 10.1058 13.0831C9.43811 13.3592 8.72252 13.5009 8 13.5C7.27748 13.5009 6.56189 13.3592 5.8942 13.0831C5.22652 12.807 4.61985 12.4019 4.10896 11.891C3.59806 11.3801 3.19297 10.7735 2.91688 10.1058C2.64079 9.43811 2.49912 8.72252 2.5 8C2.49912 7.27748 2.64079 6.56189 2.91688 5.8942C3.19297 5.22652 3.59806 4.61985 4.10896 4.10896C4.61985 3.59806 5.22652 3.19297 5.8942 2.91688C6.56189 2.64079 7.27748 2.49912 8 2.5ZM7.5 5V6H8.5V5H7.5ZM7.5 7V11H8.5V7H7.5Z"
                          fill="black" />
                </svg>
                <p class="waitingMessage">
                    @TempData["ChangePWErrorMessage"]
                </p>
            </div>
        </div>

        @using (Html.BeginForm("ChangePasswordV2", "ProfileManagement", FormMethod.Post, new { @class = "", @id = "changePasswordForm" }))
        {
            @Html.AntiForgeryToken();
            <div class="flex flex-col gap-[24px] mt-6">
                <!-- for old password -->
                <div>
                    <label for="oldPassword" class="labelInfo">現在のパスワード</label>
                    <div class="relative inputWrapper mt-1 ">
                        @Html.TextBoxFor(model => model.OldPassword, new
                   {
                       @class = "w-full focus:outline-none ring-0 focus:ring-0 focus:ring-transparent",
                       @id = "oldPassword",
                       @placeholder = "パスワード",
                       @maxLength = "32",
                       type = "password"
                   })
                        <i class="las la-eye password-eye absolute top-3 right-2 " onclick="togglePassword()"
                           required></i>
                        <span class="validationMessage">
                            @Html.ValidationMessageFor(m => m.OldPassword)
                        </span>
                    </div>
                    <ul class="message">
                        <li id="oldmessagesConfirm" class="success text-[10px] font-normal leading-[13.62px]"></li>
                    </ul>
                    @*<a href="@Url.Action("remind", "user")" class="forgetPassword" style="text-transform:uppercase ">パスワードをお忘れですか <span style="font-size:14px">?</span></a>*@
                    <div class="flex justify-end items-start mt-1"><a href="@Url.Action("remind", "user")" class="forgetPassword" style="text-transform:uppercase ">パスワードをお忘れですか <span style="font-size:12px">?</span></a></div>
                </div>
                <!-- for passowrd -->
                <div>
                    <label for="password" class="labelInfo">新しいパスワード</label>
                    <div class="relative inputWrapper mt-1">
                        @Html.TextBoxFor(model => model.NewPassword, new
                   {
                       @class = "w-full   focus:outline-none ring-0 focus:ring-0 focus:ring-transparent",
                       @id = "password",
                       @name = "password",
                       @placeholder = "パスワード",
                       @maxLength = "32",
                       type = "password"
                   })
                        <i class="las la-eye password-eye absolute top-3 right-2 " onclick="togglePassword()"
                           required></i>
                        <span class="validationMessage">
                            @Html.ValidationMessageFor(m => m.NewPassword)
                        </span>
                    </div>
                    <ul id="messages" class="message"></ul>
                </div>
                <!-- for confirm password -->
                <div>
                    <label for="confirmPassword" class="labelInfo">新しいパスワードを確認</label>
                    <div class="relative inputWrapper mt-1 ">
                        @Html.TextBoxFor(model => model.ConfirmPassword, new
                   {
                       @class = "w-full   focus:outline-none ring-0 focus:ring-0 focus:ring-transparent",
                       @id = "confirmPassword",
                       @name = "confirmPassword",
                       @placeholder = CRS.CUSTOMER.APPLICATION.Resources.Resource.ConfirmNewPassword,
                       @maxLength = "32",
                       type = "password"
                   })
                        <i class="las la-eye password-eye absolute top-3 right-2 " onclick="togglePassword()"
                           required></i>
                        <span class="validationMessage">
                            @Html.ValidationMessageFor(m => m.ConfirmPassword)
                        </span>
                    </div>
                    <ul id="messagesConfirm" class="message"></ul>
                </div>
            </div>
            <!-- for next button  -->
            <div class="mt-6">
                <button type="button" id="changepasswordsubmit" class="nextButton border rounded-lg  w-full">次</button>
            </div>

            <div id="confirmationModal" class="modal" style="display:none;">
                <div class="modal-content">
                    <h4 class="headerName">最終確認</h4>
                    <div class="pt-2 ">
                        <p>すべてのデバイスからログアウトしてもよろしいですか？</p>
                        <div class="w-100% border mt-[13px] "></div>
                    </div>
                    <div class="flex gap-2 mt-[10px]">
                        <button id="cancelSubmit" class="cancelButton" style="border-radius: 4px;">いいえ</button>
                        <button id="confirmSubmit" class="nextButton2" style="border-radius: 4px; background: var(--Darker_Primary, #D75A8B);">はい</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script>


    var tempDataValue = "@Html.Raw(TempData["ChangePWErrorMessage"])";
    if (tempDataValue !== "") {
        $("#waitingMessageWrapper").css("display", "block");
        setTimeout(function () {
            $("#waitingMessageWrapper").css("display", "none");
        }, 5000);
    }
    function checkValidation() {
        var oldPassword = $('#oldPassword').val();
        var NewPassword = $('#password').val();
        var confirmPassword = $('#confirmPassword').val();
        if (oldPassword == null || oldPassword == '')
            return false;
        else if (NewPassword == null || NewPassword == '')
            return false;
        else if (confirmPassword == null || confirmPassword == '')
            return false;
        else if (NewPassword != confirmPassword)
            return false;
        else
            return true;
    }


    document.getElementById('changepasswordsubmit').addEventListener('click', function (event) {
        if (checkValidation() == true) {
            event.preventDefault();
            document.getElementById('confirmationModal').style.display = 'flex';
        }
        else {
            return false;
        }
    });

    document.getElementById('confirmSubmit').addEventListener('click', function () {
        document.getElementById('confirmationModal').style.display = 'none';
        document.getElementById('changePasswordForm').submit();
    });

    document.getElementById('cancelSubmit').addEventListener('click', function () {
        document.getElementById('confirmationModal').style.display = 'none';
    });

    // Optional: Close the modal when clicking outside of it
    window.onclick = function (event) {
        if (event.target == document.getElementById('confirmationModal')) {
            document.getElementById('confirmationModal').style.display = 'none';
        }
    }



    document.querySelectorAll('.password-eye').forEach(function (eyeIcon) {
        eyeIcon.addEventListener('click', function () {
            togglePassword(this);
        });
    });

    var ispasswordstrong = false;
    $('#changePasswordForm').submit(function (event) {
        var oldPassword = $('#oldPassword').val();
        var newPassword = $('#password').val();
        var confirmPassword = $('#confirmPassword').val();
        if (oldPassword === "") {
            $("#oldmessagesConfirm").text("パスワードがは必要です。");
            return false;
        }
        if (ispasswordstrong == false) {
            return false; // Prevent form submission
        }
        if (oldPassword === newPassword) {
            $("#oldmessagesConfirm").text("パスワード古いパスワードと同じは不可");
            return false; // Prevent form submission
        }

        if (newPassword === "" || confirmPassword === "") {
            return false; // Prevent form submission
        }
        if (newPassword !== confirmPassword) {

            return false; // Prevent form submission
        }

    });


    function togglePassword(eyeIcon) {
        const passwordInput = eyeIcon.previousElementSibling;

        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            eyeIcon.classList.remove('la-eye');
            eyeIcon.classList.add('la-eye-slash');
        } else {
            passwordInput.type = 'password';
            eyeIcon.classList.remove('la-eye-slash');
            eyeIcon.classList.add('la-eye');
        }
    }</script>

<script>const passwordInput = document.getElementById('password');
    const messagesElement = document.getElementById('messages');
    passwordInput.addEventListener('focus', function () {
        validatePassword();
    });
    passwordInput.addEventListener('input', function () {
        validatePassword();
    });
    passwordInput.addEventListener('focusout', function () {
        validatePassword(true);
    });

    function validatePassword(showMessage) {
        const password = passwordInput.value;
        const hasAlphanumeric = /^(?=.*[0-9])/.test(password);
        const hasUpperCase = /^(?=.*[A-Z])(?=.*\d).+$/.test(password);
        const hasLowerCase = /^(?=.*[a-z])(?=.*\d).+$/.test(password);
        const hasMinLength = password.length >= 8 && password.length <= 32;;
        const hasLetterAndDigit = /^(?=.*[a-z])(?=.*[A-Z]).+$/.test(password);
        const isStrongPassword = hasUpperCase && hasLowerCase && hasMinLength;
        if (showMessage && isStrongPassword) {
            messagesElement.innerHTML = '<ul><li class="success text-[10px] font-normal leading-[13.62px]" >パスワードの安全性が高いです</li></ul>';
            ispasswordstrong = true;
        } else {
            const messages = [
                { valid: hasMinLength, message: '最小 8 文字以上、最大 32 文字以内にしてください' },
                { valid: hasAlphanumeric, message: '1 つの数字を含めてください' },
                { valid: hasUpperCase, message: '1 つの大文字を含めてください' },
                { valid: hasLowerCase, message: '1 つの小文字を含めてください' },
            ];
            messagesElement.innerHTML = '<ul>' +
                messages.map(({ valid, message }) => `<li class="${valid ? 'success' : 'error'} text-[10px] text-[#666] font-normal leading-[13.62px]">${message}</li>`).join('') +
                '</ul>';
            ispasswordstrong = false;
        }
    }</script>
<script>const passwordInput1 = document.getElementById('password');
    const confirm1 = document.getElementById('confirmPassword');
    const messagesElement1 = document.getElementById('messagesConfirm');
    confirm1.addEventListener("input", function () {
        const password = passwordInput1.value;
        const confirmPassword = confirm1.value;

        if (confirmPassword !== "" && password === confirmPassword) {
            messagesElement1.innerHTML = '<ul><li class="success text-[10px] text-[#666] font-normal leading-[13.62px]">パスワードが一致する</li></ul>';
        } else {
            messagesElement1.innerHTML = '<ul><li class="error text-[10px] text-[#666] font-normal leading-[13.62px]">パスワードが一致していません</li></ul>';
        }
    });
    passwordInput1.addEventListener("input", function () {
        const password = passwordInput1.value;
        const confirmPassword = confirm1.value;

        if (confirmPassword !== "") {
            if (confirmPassword !== "" && password === confirmPassword) {
                messagesElement1.innerHTML = '<ul><li class="success text-[10px] text-[#666] font-normal leading-[13.62px]">パスワードが一致する</li></ul>';
            } else {
                messagesElement1.innerHTML = '<ul><li class="error text-[10px] text-[#666] font-normal leading-[13.62px]">パスワードが一致していません</li></ul>';
            }
        }

    });</script>

<script>function logoutAndRedirect() {
        $.ajax({
            url: '/Home/LogOff',
            method: 'POST',
            success: function () {
                window.location.href = '/Home/ForgotPassword';
            },
            error: function () {
                window.location.reload();
            }
        });
    }</script>
