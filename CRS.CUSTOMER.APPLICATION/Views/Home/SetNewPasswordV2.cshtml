@model CRS.CUSTOMER.APPLICATION.Models.Home.SetRegistrationPasswordModel
@{
    Layout = null;
}
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/Content/assets/css/tailwind.css">
    <link rel="stylesheet" href="/Content/assets/css/customer/global.css">
    <link rel="stylesheet" href="/Content/assets/css/customer/club.css">
    <link rel="stylesheet" href="/Content/assets/css/customer/customcss.css">
    <link rel="stylesheet" href="/Content/assets/css/owl-carousel/owl.carousel.min.css">
    <link rel="stylesheet" href="/Content/assets/css/owl-carousel/owl.theme.default.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.1/flowbite.min.css" rel="stylesheet" />
    <script src="/Content/assets/js/owl.carousel.js"></script>
    <script src="/Content/assets/js/modal.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tw-elements/dist/css/tw-elements.min.css" />
    <link rel="stylesheet"
          href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css">
    <link rel="stylesheet"
          href="https://maxst.icons8.com/vue-static/landings/line-awesome/font-awesome-line-awesome/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,400;0,500;0,600;0,700;0,800;1,400;1,500;1,600;1,700;1,800&display=swap"
          rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/select2-bootstrap-css/1.4.6/select2-bootstrap.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js"></script>
    <script src="/Content/js/NotificationMessageToaster.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <title>Hoslog | Set Password</title>
</head>

<body class="md:hidden">
    <style>
        .header {
            color: #18181B;
            margin-top: 12px;
            font-family: "Noto Sans";
            font-size: 16px;
            font-style: normal;
            font-weight: 700;
            line-height: 16px;
        }

        .inputWrapper {
            border: 1px solid #ECECEC;
            border-radius: 4px;
        }

            .inputWrapper > input {
                border: none;
                outline: none;
                background: none;
            }

        input::placeholder {
            color: var(--silver, #A6A6A6);
            font-size: 12px;
            font-style: normal;
            font-weight: 400;
            line-height: 18px;
        }

        .nextButton {
            background: #D75A8B;
            padding: 8px 12px;
            color: #fff;
            font-weight: 700;
            line-height: 24px;
            font-size: 14px;
        }
        /* <style> */
        input {
            /* margin-bottom: 10px; */
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 3px;
            width: 200px;
            padding-left: 25px;
            /* Space for icon */
            background-repeat: no-repeat;
            background-position: 3px center;
            /* Icon position */
        }

            input:focus {
                border: 1px solid #D75A8B !important;
                border-radius: 3px;
            }

        .message ul {
            list-style-type: none;
            padding-left: 10px;
        }

            .message ul li {
                margin-bottom: 5px;
                padding-left: 4px;
            }

                .message ul li::marker {
                    color: green;
                    margin-right: 1ch;
                    content: '✓';
                }

                .message ul li.error::marker {
                    color: red;
                    margin-right: 1ch;
                    content: 'X';
                }

        .waitingMessageWrapper {
            border-radius: 4px;
            background: #FFEDED;
            margin-top: 16px;
            /*display: none;*/
        }

        .waitingMessage {
            color: #000;
            font-feature-settings: 'clig' off, 'liga' off;
            font-family: "Noto Sans";
            font-size: 10px;
            font-style: normal;
            font-weight: 500;
            line-height: normal;
        }
    </style>
    <div>
        <!-- for back button -->
        <div class="flex items-center  border-b border-b-[#E8E8E8] sticky top-0 bg-white z-[10] relative px-4 py-[10px] h-[44px]">
            <div class="flex gap-2 items-center absolute top-[12px] text-sm">
                <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 22 22" fill="none">
                    <path d="M15.2347 2.74084C14.7855 2.29167 14.0614 2.29167 13.6122 2.74084L5.99469 10.3583C5.63719 10.7158 5.63719 11.2933 5.99469 11.6508L13.6122 19.2683C14.0614 19.7175 14.7855 19.7175 15.2347 19.2683C15.6839 18.8192 15.6839 18.095 15.2347 17.6458L8.59802 11L15.2439 4.35417C15.6839 3.91417 15.6839 3.18084 15.2347 2.74084Z"
                          fill="#BCB08A" />
                </svg>戻る
            </div>
            <div class="text-center w-full font-bold"></div>
        </div>
        <!-- back button end -->
        <div class=" px-6">
            <div class="header">
                パスワードを作成する
            </div>

            <div id="waitingMessageWrapper" style="display:none">
                <div class="flex p-2 gap-2 items-center waitingMessageWrapper">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
                        <path d="M8 1.5C4.416 1.5 1.5 4.416 1.5 8C1.5 11.584 4.416 14.5 8 14.5C11.584 14.5 14.5 11.584 14.5 8C14.5 4.416 11.584 1.5 8 1.5ZM8 2.5C8.72252 2.49912 9.43811 2.64079 10.1058 2.91688C10.7735 3.19297 11.3801 3.59806 11.891 4.10896C12.4019 4.61985 12.807 5.22652 13.0831 5.8942C13.3592 6.56189 13.5009 7.27748 13.5 8C13.5009 8.72252 13.3592 9.43811 13.0831 10.1058C12.807 10.7735 12.4019 11.3801 11.891 11.891C11.3801 12.4019 10.7735 12.807 10.1058 13.0831C9.43811 13.3592 8.72252 13.5009 8 13.5C7.27748 13.5009 6.56189 13.3592 5.8942 13.0831C5.22652 12.807 4.61985 12.4019 4.10896 11.891C3.59806 11.3801 3.19297 10.7735 2.91688 10.1058C2.64079 9.43811 2.49912 8.72252 2.5 8C2.49912 7.27748 2.64079 6.56189 2.91688 5.8942C3.19297 5.22652 3.59806 4.61985 4.10896 4.10896C4.61985 3.59806 5.22652 3.19297 5.8942 2.91688C6.56189 2.64079 7.27748 2.49912 8 2.5ZM7.5 5V6H8.5V5H7.5ZM7.5 7V11H8.5V7H7.5Z"
                              fill="black" />
                    </svg>
                    <p class="waitingMessage">
                        @TempData["ForgetPWErrorMessage"]
                    </p>
                </div>
            </div>
            @using (Html.BeginForm("SetNewPasswordV2", "Home", FormMethod.Post, new { @role = "form", @id = "Form" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.AgentId)
                @Html.HiddenFor(model => model.MobileNumber)
                @Html.HiddenFor(model => model.UserId)
                @Html.HiddenFor(model => model.NickName)
                <div class="relative inputWrapper mt-4">
                    @Html.TextBoxFor(model => model.Password, new
               {
                   @class = "w-full focus:outline-none ring-0 focus:ring-0 focus:ring-transparent",
                   @type = "password",
                   @name = "password",
                   @id = "password",
                   @placeholder = "パスワード",
                   @maxlength = "16"
               })
                    @*<input type="password" class="w-full   focus:outline-none ring-0 focus:ring-0 focus:ring-transparent"
                        style="" placeholder="パスワード" name="password" id="password" required>*@
                    <i class="las la-eye password-eye absolute top-3 right-2 " onclick="togglePassword()" required></i>
                </div>
                @*<span class="validationMessage">
                    @Html.ValidationMessageFor(m => m.Password)
                </span>*@
                <ul id="messages" class="message"></ul>
                <div style="color:#666" id="error2" class="hidden text-[#666] text-[10px] font-[400]">Field Empty</div>
                <div class="relative inputWrapper mt-2 ">
                    @Html.TextBoxFor(model => model.ConfirmPassword, new
               {
                   @class = "w-full focus:outline-none ring-0 focus:ring-0 focus:ring-transparent",
                   @type = "password",
                   @name = "confirmPassword",
                   @id = "confirmPassword",
                   @placeholder = "パスワード確認",
                   @maxlength = "16"
               })
                    @*<input type="password" class="w-full   focus:outline-none ring-0 focus:ring-0 focus:ring-transparent"
                        style="" placeholder="パスワード" name="confirmPassword" id="confirmPassword" required>*@
                    <i class="las la-eye password-eye absolute top-3 right-2 " onclick="togglePassword()" required></i>
                </div>
                @*<span class="validationMessage">
                    @Html.ValidationMessageFor(m => m.ConfirmPassword)
                </span>*@
                <ul id="messagesConfirm" class="message"></ul>
                <div style="color:#666" id="error2" class="hidden text-[#666] text-[10px] font-[400]">Field Empty</div>
                <!-- for next button  -->
                <div class="mt-6">
                    <button type="submit" class="nextButton border rounded-lg  w-full">次</button>
                </div>
            }
        </div>
    </div>
    <script>
        document.querySelectorAll('.password-eye').forEach(function (eyeIcon) {
                    eyeIcon.addEventListener('click', function () {
                        togglePassword(this);
                    });
        });
        var tempDataValue = "@Html.Raw(TempData["ForgetPWErrorMessage"])";
         if (tempDataValue !== "") {
             $("#waitingMessageWrapper").css("display", "block");
             setTimeout(function () {
                 $("#waitingMessageWrapper").css("display", "none");
             }, 5000);
         }
        function togglePassword(eyeIcon) {
            const passwordInput = eyeIcon.previousElementSibling; // Get the input element before the icon

            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                eyeIcon.classList.remove('la-eye');
                eyeIcon.classList.add('la-eye-slash');
            } else {
                passwordInput.type = 'password';
                eyeIcon.classList.remove('la-eye-slash');
                eyeIcon.classList.add('la-eye');
            }
        }</script>
    <script>
        const passwordInput = document.getElementById('password');
        const messagesElement = document.getElementById('messages');
        // validatePassword(); // Initial validation
        passwordInput.addEventListener('focus', function () {
            validatePassword();
        });
        passwordInput.addEventListener('input', function () {
            validatePassword();
        });
        passwordInput.addEventListener('focusout', function () {
            validatePassword(true);
        });
        function validatePassword(showMessage) {
            const password = passwordInput.value;
            const hasAlphanumeric = /^(?=.*[a-zA-Z])(?=.*[0-9])/.test(password);
            const hasUpperCaseAndLower = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/.test(password);
            const hasSpecialChar = /[!@@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]/.test(password);
            const hasMinLength = password.length >= 8;
            const hasLetterAndDigit = /^(?=.*[a-z])(?=.*[A-Z]).+$/.test(password);
            const isStrongPassword = hasUpperCaseAndLower && hasAlphanumeric && hasSpecialChar && hasMinLength;
            if (showMessage && isStrongPassword) {
                messagesElement.innerHTML = '<ul><li class="success text-[10px] font-normal leading-[13.62px]" >パスワードは強力です</li></ul>';
                ispasswordstrong = true;
            } else {
                const messages = [
                    { valid: hasMinLength, message: '最低8文字必要です' },
                    { valid: hasAlphanumeric, message: '英数字の文字を含める必要があります' },
                    { valid: hasUpperCaseAndLower, message: '大文字と小文字の両方を含める必要があります' },
                    { valid: hasSpecialChar, message: '特殊文字を含める必要があります' },
                ];
                messagesElement.innerHTML = '<ul>' +
                    messages.map(({ valid, message }) => `<li class="${valid ? 'success' : 'error'} text-[10px] text-[#666] font-normal leading-[13.62px]">${message}</li>`).join('') +
                    '</ul>';
            }
        }</script>
    <script>
        const passwordInput1 = document.getElementById('password');
        const confirm1 = document.getElementById('confirmPassword');
        const messagesElement1 = document.getElementById('messagesConfirm');
        confirm1.addEventListener("input", function () {
            const password = passwordInput1.value;
            const confirmPassword = confirm1.value;

            if (confirmPassword !== "" && password === confirmPassword) {
                messagesElement1.innerHTML = '<ul><li class="success text-[10px] text-[#666] font-normal leading-[13.62px]">パスワードが一致する</li></ul>';
            } else {
                messagesElement1.innerHTML = '<ul><li class="error text-[10px] text-[#666] font-normal leading-[13.62px]">パスワードが一致していません</li></ul>';
            }
        });
        passwordInput1.addEventListener("input", function () {
            const password = passwordInput1.value;
            const confirmPassword = confirm1.value;
            if (confirmPassword !== "") {
                if (confirmPassword !== "" && password === confirmPassword) {
                    messagesElement1.innerHTML = '<ul><li class="success text-[10px] text-[#666] font-normal leading-[13.62px]">パスワードが一致する</li></ul>';
                } else {
                    messagesElement1.innerHTML = '<ul><li class="error text-[10px] text-[#666] font-normal leading-[13.62px]">パスワードが一致していません</li></ul>';
                }
            }
        });

        $("#FormSubmit").click(function (event) {
            $("#Form").submit();
        });</script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>

    <script>
    //For toaster Notification
    $(function () {
    {
        @if (TempData["Notifications"] != null)
        {
            var messages = (List<CRS.CUSTOMER.SHARED.NotificationModel>)TempData["Notifications"];
            foreach (var note in messages)
            {
                <text>showNotification("@note.Message", "@note.Title", "@note.NotificationType");</text>
            }
        }
        @{
            ViewBag.Notifications = string.Empty;
        }
        }
    });
    </script>
</body>
</html>
